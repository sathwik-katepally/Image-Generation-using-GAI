# The following method returns a helper function to compute cross entropy loss
cross_entropy = tf.keras.losses.BinaryCrossentropy(from_logits=True)


#This method measures how successfully the discriminator distinguishes between actual and fake images. It compares the discriminator's predictions on real images to an array of 1s, and its predictions on created images to an array of 0s.

def discriminator_loss(real_output, fake_output):
    real_loss = cross_entropy(tf.ones_like(real_output), real_output)
    fake_loss = cross_entropy(tf.zeros_like(fake_output), fake_output)
    total_loss = real_loss + fake_loss
    return total_loss

#The loss of the generator quantifies how successfully it was able to fool the discriminator. If the generator is operating properly, the discriminator will intuitively classify the bogus images as real (or 1). Compare the discriminators' decisions on the created images to an array of 1s in this step.

def generator_loss(fake_output):
    return cross_entropy(tf.ones_like(fake_output), fake_output)

#Save checkpoints

checkpoint_dir = './training_checkpoints'
checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt")
checkpoint = tf.train.Checkpoint(generator_optimizer=generator_optimizer,
                                 discriminator_optimizer=discriminator_optimizer,
                                 generator=generator,
                                 discriminator=discriminator)
